apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        flavorDimensions "1"
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    signingConfigs {

        def appStoreFile = System.getenv("STORE_FILE")
        def appStorePassword = System.getenv("STORE_PASSWORD")
        def appKeyAlias = System.getenv("KEY_ALIAS")
        def appKeyPassword = System.getenv("KEY_PASSWORD")

        //当不能从环境变量获取到签名信息的时候，使用项目中带的debug签名

        if (!appStoreFile || !appStorePassword || !appKeyAlias || !appKeyPassword) {
            appStoreFile = "debug.keystore"
            appStorePassword = "android"
            appKeyAlias = "androiddebugkey"
            appKeyPassword = "android"
        }

        release {
            storeFile file("my-release-key.keystore")
            storePassword "cyx768095023"
            keyAlias "my-key-alias"
            keyPassword "cyx768095023"
        }

        debug {
            storeFile file("my-debug-key.keystore")
            storePassword "cyx768095023"
            keyAlias "key0"
            keyPassword "cyx768095023"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }
    productFlavors {
        xiaomi {}
        qh360 {}
        baidu {}
        wandoujia {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "app_v${variant.versionName}_${buildTime()}_${variant.productFlavors[0].name}.apk"
        }

    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

def buildTime() {
    def date = new Date()
    def formatDate = date.format('yyyyMMdd')
    return formatDate
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies.appcompat_v7
    implementation rootProject.ext.dependencies.constraint_layout
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.test_runner
    androidTestImplementation rootProject.ext.dependencies.espresso_core
    implementation rootProject.ext.dependencies.annotations

    if (!rootProject.ext.isModule) {
        implementation project(':app.lockscreen')
        implementation project(':app.bluetooth')
        implementation project(':app.chart')
    }


}
